{"version":3,"sources":["shuffle.js","Components/Board.js","Components/Reset.js","Components/Scoreboard.js","Components/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["shuffle","oldArr","min","max","arr","slice","elementsPerRow","length","i","Math","pow","currRow","floor","currCol","j","random","randRow","randCol","Board","props","state","board","createCards","bind","this","map","row","key","className","num","onClick","handleClick","React","Component","Reset","resetApp","Scoreboard","formatTime","seconds","mins","pairsFound","numPairs","time","isFinite","bestTime","Instructions","onClose","e","show","class","id","children","App","showInstructions","setState","Infinity","lastClicked","timerID","checkGameState","numPairsOnBoard","alert","preventDefault","clearInterval","document","querySelectorAll","forEach","card","classList","remove","add","dataset","found","setTimeout","currClick","target","setInterval","prevClick","textContent","Boolean","window","location","hostname","match","body","querySelector","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e66f7ff8.chunk.js","sourcesContent":["/***********************************************************************\n* File that contains utility functions for the Board component\n***********************************************************************/\n\n// generayes a random integer from min - max inclusive\nconst randomIntGenerator = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\n/***********************************************************************\n* Pure function that takes a symmetrical 2D array as an argument and\n* returns a new 2D array that is shuffled using the Fisher Yates Shuffle\n*\n* The array is symmetrical so on each iteration the row/col is calculated\n* from i, which counts down from the number of total elements. A random\n* integer in the range 0 <= j <= i, is generated and the appropriate\n* row and column is calculated from j.\n\n***********************************************************************/\n\nexport default function shuffle(oldArr) {\n    const arr = oldArr.slice();\n    const elementsPerRow = arr.length;\n    const totalElements = Math.pow(arr.length, 2);\n\n    for (let i = totalElements - 1; i > 0; i--) {\n\n        // calculate the position of the current element\n        const currRow = Math.floor(i / elementsPerRow);\n        const currCol = i % elementsPerRow;\n\n        // 0 <= j <= i\n        const j = randomIntGenerator(0, i);\n\n        // calculate the position of a random element\n        const randRow = Math.floor(j / elementsPerRow);\n        const randCol = j % elementsPerRow;\n\n        //swap the current element with a random index\n        [arr[currRow][currCol], arr[randRow][randCol]] = [arr[randRow][randCol], arr[currRow][currCol]];\n    }\n    return arr;\n}","/***********************************************************************\n* File that contains the Board Class\n***********************************************************************/\nimport React from 'react';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n\n    // board is by default 6x6 grid\n    // Numbers will be the differentiators for the game\n    this.state = {\n        board: this.props.board,\n    }\n\n        this.createCards = this.createCards.bind(this);\n    }\n\n    /***********************************************************************\n    * iterates over the board and creates cards in the DOM\n    ***********************************************************************/\n    createCards() {\n\n        // the board is 2D so we iterate over each row\n        return this.state.board.slice().map((row, i) => {\n            return (\n                <div key={i + 100} className='board__row'>\n                    {row.map((num, j) => <div key={i + j} className='board__card board__card--hidden' onClick={this.props.handleClick}>{num}</div>)}\n                </div>\n            )\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"board\">\n                {this.createCards()}\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React from 'react';\n\nclass Reset extends React.Component {\n    render() {\n        return (\n            <button className='Reset__button' onClick={this.props.resetApp}>Reset Board</button>\n        )\n    }\n}\n\nexport default Reset;","import React from 'react';\n\nclass Scoreboard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.formatTime = this.formatTime.bind(this);\n    }\n\n    formatTime(seconds) {\n        let mins = Math.floor(seconds / 60);\n        seconds %= 60;\n\n        // pad the minutes\n        if (mins < 10) {\n            mins = `0${mins}`;\n        }\n\n        if (seconds < 10) {\n            seconds = `0${seconds}`;\n        }\n\n        return `${mins}:${seconds}`;\n    }\n\n    render() {\n        return (\n            <div className=\"scoreboard\">\n                <p>{this.props.pairsFound}/{this.props.numPairs} Pairs Found</p>\n                <p>Current time: {this.props.time ? this.formatTime(this.props.time) : '00:00'}</p>\n                <p>Best time: {isFinite(this.props.bestTime) ? this.formatTime(this.props.bestTime) : 'N/A'}</p>\n            </div>\n        );\n    }\n}\n\nexport default Scoreboard;","import React from 'react';\n\nclass Instructions extends React.Component {\n\n    onClose = e => {\n        this.props.onClose && this.props.onClose(e);\n      };\n    \n    render() {\n        if(!this.props.show){\n            return null;\n        }\n        return (\n            <div class=\"instructionsModal\" id=\"instructionsModal\">\n                <h2>Instructions</h2>\n                <div class=\"content\">{this.props.children}</div>\n                <div class=\"actions\">\n                    <button class=\"close-button\" onClick={this.onClose}>Ok</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Instructions;","import React from 'react';\nimport './App.css';\nimport shuffle from './shuffle';\nimport Board from './Components/Board';\nimport Reset from './Components/Reset';\nimport Scoreboard from './Components/Scoreboard';\nimport Instructions from './Components/Instructions';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = ({\n      bestTime: Infinity,\n      board: shuffle([\n        [1, 1, 2, 2, 3, 3],\n        [4, 4, 5, 5, 6, 6],\n        [7, 7, 8, 8, 9, 9],\n        [10, 10, 11, 11, 12, 12],\n        [13, 13, 14, 14, 15, 15],\n        [16, 16, 17, 17, 18, 18],\n      ]),\n      lastClicked: null,\n      pairsFound: 0,\n      time: 0,\n      timerID: null\n    })\n\n      this.handleClick = this.handleClick.bind(this);\n      this.checkGameState = this.checkGameState.bind(this);\n      this.numPairsOnBoard = this.numPairsOnBoard.bind(this);\n      this.resetApp = this.resetApp.bind(this);\n    }\n\n    numPairsOnBoard() {\n      return (Math.pow(this.state.board.length, 2) / 2);\n    }\n\n    checkGameState() {\n      // In regards to the right side of the equality check:\n      // the game is a symmetrical matrix. A 6x6 grid has 36 cards or 18 pairs\n      if (this.state.pairsFound === (Math.pow(this.state.board.length, 2) / 2)) {\n\n        if (!isFinite(this.state.bestTime) || this.state.time < this.state.bestTime) {\n          this.setState({\n            bestTime: this.state.time\n          });\n        }\n\n        this.resetApp();\n\n        alert(\"Congraulations you won\")\n      }\n    }\n\n    // function that shuffles the board and resets the state of the game\n    resetApp(e = null) {\n\n      // if the event is due to the reset button being hit rather than the game being won\n      if (e) {\n        e.preventDefault();\n      }\n\n      clearInterval(this.state.timerID);\n      this.setState({\n        timerID: null\n      });\n\n      // set all the cards to a hidden state\n      [...document.querySelectorAll('.board__card')].forEach(card => {\n        card.classList.remove('board__card--found');\n        card.classList.remove('board__card--active');\n        card.classList.add('board__card--hidden');\n        card.dataset.found = \"false\";\n      });\n\n      setTimeout(() => {\n        // shuffle the board\n        this.setState({\n          board: shuffle(this.state.board),\n          lastClicked: null,\n          pairsFound: 0,\n          time: 0\n        });\n      }, 200);\n    }\n\n    state = {\n      show: false\n    }\n  \n    showInstructions = e => {\n      this.setState({\n          show: !this.state.show\n      });\n    }\n\n    /***********************************************************************\n  * Handles click event on any of the cards in the Game\n  *\n  * If the card is the first card clicked, keep it active\n  * Otherwise we need to compare it to previously clicked element\n  * -- If it matches, make them visible with a class of found\n  * -- Otherwise revert the state of each card back to hidden\n  ***********************************************************************/\n    handleClick(e) {\n      const currClick = e.target;\n\n      // first click, start the timer!\n      if (this.state.time === 0 && this.state.timerID === null) {\n        const timerID = setInterval(() => {\n          this.setState({\n            time: this.state.time + 1\n          });\n        }, 1000);\n\n        this.setState({\n          timerID: timerID\n        });\n      }\n\n      // error checks\n      if (this.state.lastClicked === currClick || e.target.dataset.found === \"true\") {\n        return;\n      }\n\n      // update the current card to an active state\n      currClick.classList.remove('board__card--hidden');\n      currClick.classList.add('board__card--active');\n\n      // give a little feedback delay\n      setTimeout(() => {\n\n        // this is a comparison click\n        if (this.state.lastClicked) {\n          const prevClick = this.state.lastClicked;\n\n          // the user made a match! set cards to a 'found' state\n          if (prevClick.textContent === currClick.textContent) {\n\n            // increment pairsFound\n            this.setState({\n              pairsFound: this.state.pairsFound + 1\n            });\n\n            currClick.classList.remove('board__card--active');\n            currClick.classList.add('board__card--found');\n\n            prevClick.classList.remove('board__card--active');\n            prevClick.classList.add('board__card--found');\n\n            // used in the error check at the top of this method\n            prevClick.dataset.found = \"true\";\n            currClick.dataset.found = \"true\";\n\n            this.checkGameState();\n          }\n\n          // wrong guess! revert the cards back to 'hidden' state\n          else {\n            currClick.classList.remove('board__card--active');\n            currClick.classList.add('board__card--hidden');\n\n            prevClick.classList.remove('board__card--active');\n            prevClick.classList.add('board__card--hidden');\n          }\n\n          // next click will be the first click\n          this.setState({\n            lastClicked: null\n          });\n        }\n\n        // not a comparison click, save click reference for next comparison click\n        else {\n          this.setState({\n            lastClicked: currClick\n          });\n        }\n      }, 600); \n    }\n\n    render() {\n      return (\n        <div className=\"App\">\n          <h1>MEMORY GAME <button class=\"toggle-button\" id=\"centered-toggle-button\" onClick={e => {this.showInstructions(e);}}>Instructions</button></h1>\n          <Instructions onClose={this.showInstructions} show={this.state.show}>\n            <p>Click the green cards to see what number they uncover and try to find the matching number underneath the other cards.</p>\n            <p>Uncover two matching symbols at once to eliminate them from the game.</p>\n            <p>The game ends when all of the pairs of matching cards are found.</p>\n            <p>Eliminate all cards as fast as you can in order to win best time stamp!</p>\n            <p>You can reset the game by clicking the Reset button and the cards will be reshuffled and the timer will be stopped until the game is started again.</p>\n          </Instructions>\n          <Scoreboard numPairs={this.numPairsOnBoard()} pairsFound={this.state.pairsFound} time={this.state.time} bestTime={this.state.bestTime} />\n          <Board board={this.state.board} handleClick={this.handleClick} />\n          <Reset resetApp={this.resetApp} />\n        </div>  \n      ) \n    }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles.css';\n\n// ass classes to the body and html element for basic styling\ndocument.body.classList.add('body');\ndocument.querySelector('html').classList.add('html');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}